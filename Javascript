1.Debouncing :

it is a javascript technique used to manage frequency of function execution in the particularly in  response to user event. by ensuring that a function only called  after  a certain period of inactivity, Debouncing  enhance the performance and imporve the user experience and reduce the server load

2.Event propagation:

when a user interact with in an event  (like click the button ) inside the div the event doesn't stay there it will move up or move down through the dom tree

1.capture phase -  from top window to target

2.target phase - event should  reach actual element

3.bubbling phase - from target to backup  window

3.throttling:

 throttling means  limit a function to only run once  every x millieseconds, no matters how many times event fires



event deligation:

event deligation instead of adding event listeners to the children element you can add one common event listener to their common parent . and handle event based on the event.target

example :

list 

event bubbling:

it is a process of where an event starts from the  target element to bubbles up (moves up) to their ancestors (parent) up to the document to window 

  

avoid unnesscary rerendering:

1.using usememo :

What is it?

useMemo memoizes the result of a function call and returns the cached result unless the dependencies change.

It prevents re-calculating expensive functions on every render.

Why use it?

Optimizes performance when performing expensive calculations.

Recomputes values only when dependencies change — not on every render.

2.usecallback:

useCallback: Memoizing Functions

What is it?

useCallback is similar to useMemo, but instead of memoizing values, it memoizes functions.

It ensures that the function reference stays the same between renders unless the dependencies change.

Why use it?

Prevents re-creating functions on every render.

Useful when passing functions as props to child components or when you’re dealing with event handlers.



3. use memo to avoid for an expensive calculation

4.split the Ui

5.key props properly in list 

6.avoid unnesscary function inside the jsx

7.

how to improve performance of the  react app
 

how dom works?
   1. what is dom :
     The DOM is an object-oriented representation of the HTML document. It maps every part of the HTML page (tags, attributes, text content) into a tree structure, 
making it accessible and manipulable using JavaScript. The browser converts the HTML, CSS, and JavaScript into the DOM so that you can interact with and modify it.
   2. Structure of the DOM
The DOM is structured as a tree, with a root node at the top and several branches (nodes) below. Every node represents a part of the HTML document, such as an element, 
an attribute, or text.
   i)Root Node: The entire document (usually document).

   ii)Element Nodes: Tags like <div>, <p>, <h1>, etc.

   iii)Text Nodes: Text within elements.

   iv)Attribute Nodes: Attributes like id, class, etc., within elements

   3.How This Works in Action:
When you load a page, the browser doesn’t render everything at once. It builds the DOM tree incrementally as it receives the HTML from the server.JavaScript interacts with 
this DOM, and any changes (like adding elements, changing text, or styles) are immediately reflected on the page.

how the dom works ?
   1.The DOM represents the HTML document as a tree structure where each node is an object representing an element, attribute, or piece of text.

   2.JavaScript interacts with the DOM to read, modify, add, or remove elements, styles, and content.

   3.The browser uses the DOM to render the webpage and apply styles, creating a visual representation of the page.

   4.Event handling in the DOM allows interaction with elements (e.g., button clicks, form submissions).

   5.Reflow and repaint are browser processes that happen when the DOM is changed, and frequent changes can impact performance.



how the process of recolization and virutal dom
    Reconciliation and the Virtual DOM are key concepts in React, enabling it to efficiently update the user interface (UI) and improve performance.
  1. What is the Virtual DOM?
The Virtual DOM is an in-memory representation of the real DOM. It is a lightweight, JavaScript object that mirrors the actual DOM structure of a web page. 
Instead of directly manipulating the real DOM, React first interacts with the Virtual DOM to calculate the most efficient way to update the real DOM.
  2.Why Use the Virtual DOM?
     Performance: Manipulating the DOM can be slow, especially when many changes are made. By using the Virtual DOM, React minimizes direct DOM manipulation and batches updates.
  
     Efficient Updates: React makes only the necessary changes to the real DOM, rather than re-rendering the entire UI.
2. Reconciliation: The Process
Reconciliation is the process by which React updates the real DOM to reflect changes made in the Virtual DOM. It determines what parts of the actual DOM 
need to be updated by comparing the new Virtual DOM with the previous one.

 Reconciliation: The Process
Reconciliation is the process by which React updates the real DOM to reflect changes made in the Virtual DOM. It determines what parts of the actual DOM need to be updated by comparing the new Virtual DOM with the previous one.

Here’s how reconciliation works in React:

Initial Render:

When a React component is rendered, it returns a Virtual DOM tree that represents the UI.

React then compares this Virtual DOM with the real DOM and makes changes accordingly. This is the first rendering cycle.

State or Props Change:

When there is a change in state or props (e.g., a button click or data update), React triggers a re-render.

A new Virtual DOM is created, reflecting the updated UI.

Diffing (Comparison):

React compares the previous Virtual DOM tree with the newly created one using a diffing algorithm.

The diffing algorithm identifies what has changed between the two Virtual DOM trees.

Reconciliation and Patch:

Based on the differences, React creates a patch (a minimal set of changes) that needs to be applied to the real DOM.

React then updates only those parts of the real DOM that have changed, rather than re-rendering the entire UI.

3. React’s Diffing Algorithm
The core of React's reconciliation process is the diffing algorithm. React performs the following steps to determine what has changed:

Element Type Comparison:

React compares the type of elements in the old and new Virtual DOM.

If the elements are of different types (e.g., a <div> changed to a <span>), React will tear down the old element and replace it with the new one.

Component Update:

If the elements are of the same type, React will compare their attributes, children, and other properties.

For example, if an element’s text content has changed, React will only update that text node, rather than re-rendering the entire element.

Reusing Elements:

React tries to reuse the existing DOM elements whenever possible. If only certain attributes or properties have changed, React will update only those specific attributes, rather than creating a completely new element.

Keying List Items:

When rendering lists (e.g., using .map()), React needs to know how to efficiently re-order or re-render list items. Keys are used to identify items uniquely, ensuring efficient updates during re-renders.

4. React’s Rendering Cycle
Here’s a step-by-step breakdown of what happens when state or props change in a React app:

State Change: When a component’s state or props change (e.g., through an event handler or API response), React triggers a re-render.

Virtual DOM Update: React generates a new Virtual DOM tree based on the updated state or props.

Diffing: React compares the new Virtual DOM with the old one (from the previous render) to determine what has changed.

Reconciliation: The diffing algorithm is applied to find the minimal set of changes (the "diff") between the old and new Virtual DOM.

Real DOM Update: React updates the real DOM based on the calculated diff, applying only the necessary changes (insertions, deletions, or updates).

Commit Phase: The updates are "committed" to the real DOM, and the browser re-renders the affected UI elements.

5. Key Concepts in Virtual DOM and Reconciliation
Virtual DOM Representation:

React components return a Virtual DOM tree (a lightweight JavaScript object) instead of actual HTML or JSX markup.

Efficient Updates:

The diffing algorithm and selective updates ensure that only the parts of the UI that need to change are updated, reducing unnecessary re-renders.

Keys for List Items:

When rendering lists of elements, React uses keys to identify individual list items. This helps React efficiently update the list if the order or content changes.

6. Advantages of the Virtual DOM and Reconciliation
Improved Performance: The Virtual DOM reduces direct manipulation of the real DOM, resulting in fewer layout reflows and repaints.

Optimized Rendering: By updating only the changed parts of the DOM, React minimizes the number of updates to the real DOM.

Declarative Syntax: React’s declarative approach makes it easier to understand the UI logic and state transitions without worrying about the underlying DOM updates.



useeffect → how can we destory unmount component
   1.The cleanup function inside useEffect runs when the component unmounts or when dependencies change.

  2.Use this cleanup function to remove side effects such as timers, event listeners, subscriptions, and network requests to prevent memory leaks and unexpected behavior.

  3.In the case of network requests, you can use an AbortController to cancel an ongoing request when the component unmounts.

  4.This cleanup approach is crucial for maintaining a performant and memory-efficient React app.












lazy loading :

 lazy loading is a design pattern that postpones the  component or a resources when it is acutally needed

in react app loading component only  when they are required reather than the loading everything 

upfornt. This can be lead to a significant boost because it reduces the initial page load time and amount of javascript needed to be downloaded,parsed and executed right away

Benefits of Lazy Loading:

Faster Initial Load:

Only the critical resources (components and code) are loaded initially. This reduces the bundle size and speeds up the page load time.

Improved Performance:

Lazy loading reduces the overall time taken to load non-essential parts of the application, keeping the app more responsive.

Better User Experience:

Users don’t have to wait for the entire page to load — just the visible content, leading to a quicker first render.

Reduced Bandwidth Consumption:

Users only download the parts of the app they actually need, saving bandwidth for both the user and server.

When to Use Lazy Loading:

Large Components: Lazy load components that are not immediately visible on the screen (e.g., modals, widgets, etc.).

Routes: In single-page applications (SPAs), lazy load route-based components to avoid loading unnecessary code upfront.

Third-party Libraries: If you're using large libraries, you can lazy load them only when needed.
